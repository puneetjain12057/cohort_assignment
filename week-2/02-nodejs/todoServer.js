/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const z = require("zod");
  const m = require("mongoose");
const { validate } = require('uuid');

  m.connect("mongodb+srv://puneetjain72635:2ruTqqkujzRdkUOc@cluster0.76tdims.mongodb.net/")

  const Task = m.model('Task', {title: String, description: String});
  
  const app = express();
  let id =0;


  const schema =  z.object({
    
    title : z.string(),
    description: z.string()
  })
  
  app.use(express.json());

  app.get("/todos",async(req,res)=>{
    try{
      const task = await Task.find();
   
      res.status(200).json(task);
    
    }catch (error) {
      console.error('Error fetching tasks:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
    
  })
  
  app.get("/todos/:id",async(req,res)=>{
    try{
    let id=req.params.id;
    let task=await Task.findById(id);
    if(task){
    res.status(200).json(task);}
    else{
      res.status(404);
    }
   }catch (error) {
    console.error('Error fetching tasks:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
  })

  app.post("/todos",async (req,res)=>{
    let title = req.body.title;
    let description = req.body.description;
    //console.log(it);
    let obj ={title: title,description:description}
    let response = schema.safeParse(obj)
    if(response.success){
      let task = new Task(obj);
      task.save(); 
      let task1=await Task.findById(id);
      res.status(201).json(task1)
    }
    else {
      res.json({
        msg: "Your input is not valid"
      })
    }
  })
  
  app.put("/todos/:id",async(req,res)=>{
    let id=req.params.id;
    let title = req.body.title;
    let description = req.body.description;
    
    try {
      let task = await Task.findByIdAndUpdate(id, { title: title, description: description });
      if (task) {
        res.status(200).json({ msg: "done" });
      } else {
        res.status(404).json({ msg: "Task not found" });
      }
    } catch (error) {
      console.error('Error updating task:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
    
  })
  app.delete("/todos/:id",async (req,res)=>{
    let id = req.params.id;
    try{
    let deletedTask= await Task.findByIdAndDelete(id);
    if(deletedTask){
      res.status(200).json({ msg: "done" });
    } else {
      res.status(404).json({ error: "Task not found" });
    }
    }catch (error) {
      console.error('Error updating task:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  //app.listen(3000);
  module.exports = app;